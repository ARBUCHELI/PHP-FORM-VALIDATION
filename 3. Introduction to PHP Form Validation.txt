# INTRODUCTION TO PHP FORM VALIDATION
-------------------------------------

* Introduction
--------------
In this lesson, we’ll be using PHP to handle user input submitted through HTML forms. We’ll be performing form validations on the submitted data in order to protect our website and its 
users.

Websites and applications in production nearly always use front-end validations (HTML and JavaScript validations done on the client-side), but these validations are designed to provide a 
better user experience—NOT for security. A user could circumvent front-end validation by intentionally or accidentally turning off JavaScript in their browser. We also need to protect 
against man-in-the-middle attacks, where a malicious actor changes data after it has been submitted by the client.

The back-end should never trust the data it receives from the client. Either intentionally or not, bad data from the client has the potential to expose sensitive information, corrupt our 
data, or significantly slow down our server. In this lesson, we’ll be working with forms with no front-end validations in place; this will simulate the untrustworthy nature of client-side validation.

We’ll be using PHP to handle the logic to receive POST requests, validate the data, store the data in the back-end, and display meaningful feedback to the user.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Form Handling
---------------
Throughout this lesson, we’ll be using a PHP file to present an HTML form to users. We’ll be using the POST method attribute for more secure input submission. This means all the data 
submitted will be available in the superglobal associative array: $_POST.

In order for the user’s input to be included in the $_POST array, we provide a name attribute within the HTML. After submitting the form, this name will be the key in the $_POST array and 
the user’s input will be the value assigned to that key.

<form method="post" action="">
Your Favorite Programming Language: <input type="text" name="language">
<input type="submit" value="Submit Language">
</form>

Above we have an HTML form with a method of "post". We could provide an alternate URL for users to navigate to after submitting their form (eg. action="some_page.php"). Since we want 
users to have the opportunity to submit the form again if they have errors, we’ll leave the action as an empty string—this means that once it’s submitted, users will be served the same PHP file that originally served them the form. Our form contains an input assigned the name "language". If a user entered “PHP” (as we would assume…) into the language input of the above form and then submitted the form, their URL would not change. However, within the PHP code, the $_POST array would contain a key => value pair of "language" => "PHP".

echo $_POST["language"]; // Prints: PHP

Let’s handle an HTML form with some PHP code!

index.php
---------
<html>
	<body>
		<form method="post" action="">
			Your name:
			<br>
  		<input type="text" name="name">
 			<br><br>
  		What is the best thing about learning to code:
  		<br>
  		<input type="text" name="best">
  		<br><br> 
  		<input type="submit" value="Submit Answers">
		</form>
    <div id="form-output">
      <p id="name">
        Hello, <?= $_POST["name"]?>!
      </p>
      <p id="best">
        I am glad you enjoy <?= $_POST["best"]?>.
      </p>
    </div>
		<a href="index.php">Reset</a>
	</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Simple Validation
-------------------
In the previous exercise, we simply displayed the user input we received. Now we want to provide the user with feedback if their input isn’t correct. We’ll validate (confirm the 
correctness of) the data we receive. If the input is deemed invalid, we’ll want to give the user meaningful feedback so that they can correct their mistake and attempt to submit the form 
again.

We’ll need to make several modifications to the PHP file that we use to serve our form to users:

	1. Add PHP code to check the validity of a user’s input if the form has been submitted.

	2. Add an HTML element to display an error message to the user if their submission is not valid.

	3. Fill each field in the form with the user’s previously submitted input.

Our third task has to do with creating an improved user experience. Have you ever had to refill every field in a form after submitting it incorrectly? It’s so frustrating! By filling in 
the user’s submitted values, they’ll be able to quickly correct any fields with errors without having to start over from scratch. To accomplish this, we’ll assign each of the HTML form 
element’s value attribute—aside from the "submit" input itself—to the data submitted by the user for each field.

For the purposes of this exercise, let’s assume that “PHP” is the only valid submission for the user’s favorite language. Here’s how we might update our form from the previous exercise to 
accomplish the three tasks above:

<?php
$validation_error = "";
$user_language = "";

if ($_SERVER["REQUEST_METHOD"] === "POST") {
$user_language = $_POST["language"];
  if ($user_language != "PHP") {
    $validation_error = "* Your favorite language must be PHP!";
  } 
}
?>

<form method="post" action="">
Your Favorite Programming Language: <input type="text" name="language" value="<?php echo $user_language;?>">
<p class="error"><?= $validation_error;?></p>
<input type="submit" value="Submit Language">
</form>

Let’s walk through the above code.

	. We first assign $validation_error and $user_language to empty strings. We use these PHP values in our HTML, but, if a user has NOT yet submitted their form, we don’t want these 
	elements to have filled in values.

	. Remember that we’re validating the form data only AFTER it’s been submitted by the user at least once. To ensure that, we only run our validation code if 
	($_SERVER["REQUEST_METHOD"] === "POST"), which indicates that the current form has been submitted.

	. Within our if block, we grab the relevant value from the $_POST array: $_POST["language"]. We assign this value to our $user_language variable. This one step actually 
	accomplishes two things! It gives us an easy way to talk about the value the user submitted to this field, and it also means the value of the HTML element will now be the user’s 
	submission rather than an empty string.

	. If the value the user submitted is NOT correct, we assign an error message to $validation_error so that this part of the HTML will now give the user important feedback.

Let’s give it a try!

index.php
---------
<?php
// Define checkWord() here:
function checkWord($input, $letter) {
  if ($_SERVER["REQUEST_METHOD"] === "POST" && strtolower($input[0] != $letter)) {
    return "* This word must start with the letter ${letter}!";
  } else {
    return "";
  }
}
?>
  
<h1>Time to Practice our ABCs</h1>
<form method="post" action="">
    Enter a word that starts with the letter "a":
    <br>
    <input type="text" name="a-word" id="a-word" value="<?= $_POST["a-word"];?>">
    <p class="error" id="a-error"><?= checkWord($_POST["a-word"], "a");?></p>
    <br>      
      
    <br>     
    Enter a word that starts with the letter "b":
    <br>
    <input type="text" id="b-word" name="b-word" value="<?= $_POST["a-word"];?>">
    <p class="error" id="b-error"><?= checkWord($_POST["b-word"], "b");?></p>
    <br>      
      
    <br>
    Enter a word that starts with the letter "c":
    <br>
    <input type="text" id="c-word" name="c-word" value="<?= $_POST["a-word"];?>">
    <p class="error" id="c-error"><?= checkWord($_POST["c-word"], "c");?></p>
    <br>      
      
    <br>
    <input type="submit" value="Submit Words">
</form>
<div>
    <h3>"a" is for: <?= $_POST["a-word"];?><h3>
    <h3>"b" is for: <?= $_POST["b-word"];?><h3>
    <h3>"c" is for: <?= $_POST["c-word"];?><h3>    
<div>  

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Basic Data Sanitizing
-----------------------
In the previous exercise, we performed a simple validation to check the user’s input, but we made a mistake by directly displaying the data we received from them. Remember that we must 
never simply trust the data we receive from the client. In order to protect against innocent but dangerous user mistakes, malicious users, or man-in-the-middle attacks, we need to 
sanitize the data—transform it into a safe and standardized format. In this exercise, we’ll focus on making data safe to display on the user’s browser.

PHP provides several built-in functions to help with sanitization:

We can use the built-in PHP trim() function to remove any whitespace characters from the beginning or end of a string we receive as form input. Though not a security concern, this can 
help standardize the data prior to validation.

	$email = "     aisle.nevertell@yahoo.com   ";
	echo trim($email); // Prints: aisle.nevertell@yahoo.com

When we want to display the user’s input within our own HTML, we should first run it through htmlspecialchars(). This built-in function transforms HTML elements into HTML entities 
(characters that represent HTML elements but won’t display as HTML), so that the PHP interpreter doesn’t recognize them as HTML. This prevents, for example, a man-in-the-middle attack in 
which malicious HTML is injected into a user’s view of our site.

	$data = "<a href=\"https://www.evil-spam.biz/html/\">Your account has been compromised! Click here to get technical support!!</a>";

	echo htmlspecialchars($data);

	// Prints: &lt;a href=&quot;https://www.evil-spam.biz/html/&quot;&gt;Your account has been compromised! Click here to get technical support!&lt;/a&gt;

Sometimes we will also want to perform custom sanitizations that cannot be accomplished with built-in functions, but we’ll discuss these later in the lesson.

Let’s sanitize some data!

index.php
---------
<form method="post" action="">
Enter some HTML:
<br>
<input type="text" name="html">
<br>  
<input type="submit" value="Submit">
</form>
<div>
  You entered:
	<?= htmlspecialchars($_POST["html"])?> 
</div>  

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Basic Sanitization with filter_var()
--------------------------------------
We haven’t yet introduced the most powerful PHP function for sanitizing data: filter_var(). This function operates on a variable and passes it through a “filter” that produces the desired 
outcome.

As its first argument, filter_var() takes a variable. As its second, it takes an ID representing the type of filtering that should be performed. There are several filters for sanitizing 
common input types, including FILTER_SANITIZE_EMAIL. The function will return either the sanitized version of the input or FALSE if it was unable to perform the sanitization.

$bad_email = '<a href="www.evil-spam.biz">@gmail.com';
echo filter_var($bad_email, FILTER_SANITIZE_EMAIL);
// Prints: ahref=www.evil-spam.biz@gmail.com  

The FILTER_SANITIZE_EMAIL filter trimmed whitespace throughout our input and removed dangerous characters thus preventing any HTML injection. Essentially, it filtered out any characters 
not allowed in emails. Once sanitized, we can safely display user inputs.

Of course, $bad_email did not store a valid email in the first place. But since we often want to display invalid form data as a hint for the user, this sanitization would be useful to 
prevent a man-in-the middle attack. We could also have used htmlspecialchars($bad_email), but that would have produced &lt;a href=&quot;www.evil-spam.biz&quot;&gt;@gmail.com instead. Choose the sanitization method based on the output you want to show to the users.

You can check out the other sanitization filters available in the PHP manual.

index.php
---------
<?php
$validation_error = "";
$user_answer = "";
$submission_response = "";

// Write your code here:
if ($_SERVER["REQUEST_METHOD"] === "POST") {
  $user_answer = filter_var($_POST["answer"], FILTER_SANITIZE_NUMBER_INT);
  if ($user_answer == -5) {
    $submission_response = "Correct!";
  } else {
  $validation_error = "* Wrong answer. Try again.";
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Basic Validation with filter_var()
------------------------------------
We can use the same filter_var() function to validate as well as sanitize! There are a number of provided validation filters, but they work a bit differently from the sanitization 
filters. If the variable is deemed valid, filter_var() will return it; otherwise, it will return FALSE:

$bad_email = 'fake - at - prank dot com';
if (filter_var($bad_email, FILTER_VALIDATE_EMAIL)){
  echo "Valid email!";
} else {
  echo "Invalid email!";
} 
// Prints: Invalid email!

It’s worth noting that the provided FILTER_VALIDATE_EMAIL filter is stricter than the guidelines regulating acceptable email addresses. If a site needed to accept non-latin characters, 
for example, the built-in FILTER_VALIDATE_EMAIL filter wouldn’t be sufficient.

Using the provided validation filters is really convenient. You can check out the list of available validation filters in the PHP manual. For example, FILTER_VALIDATE_URL is useful for 
checking if a string corresponds to a possible URL.

Let’s practice!

index.php
---------
<?php
$validation_error = "";
$user_url = "";
$form_message = "";

// Write your code here:
if ($_SERVER["REQUEST_METHOD"] == "POST"){
  $user_url = $_POST["url"];
  if(!filter_var($user_url, FILTER_VALIDATE_URL)) {
    $validation_error = "* This is an invalid URL.";
    $form_message = "Please retry and submit your form again.";
  } else {
    $form_message = "Thank you for your submission.";
  }
}
?>

<form method="post" action="">
Your Favorite Website: 
<br>
<input type="text" name="url" value="<?php echo $user_url;?>">
<span class="error"><?= $validation_error;?></span>
<br>
<input type="submit" value="Submit">
</form>
<p> <?= $form_message;?> </p> 

------------------------------------------------------------------------------------------------------------------------------------------------------------------



























